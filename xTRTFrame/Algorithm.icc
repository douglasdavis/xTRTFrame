// inline definitions

template <class T>
inline void xTRT::Algorithm::create(const T obj) {
  auto clone = obj.Clone();
  wk()->addOutput(clone);
  m_objStore.emplace(std::make_pair(clone->GetName(),clone));
}

template <class T>
inline T* xTRT::Algorithm::grab(const std::string& name) {
  auto iter = m_objStore.find(name);
  if ( iter == m_objStore.end() ) {
    ANA_MSG_FATAL("Cannot find object with name:" << name);
    std::exit(EXIT_FAILURE);
  }
  return dynamic_cast<T*>(iter->second);
}

inline void xTRT::Algorithm::setTreeOutputName(const std::string name) {
  m_outputName = name;
}

inline void xTRT::Algorithm::feedConfig(const std::string fileName, bool print_conf, bool mcMode) {
  m_config.parse(fileName, print_conf, mcMode);
}

inline const xTRT::Config* xTRT::Algorithm::config() const {
  return &m_config;
}

inline bool xTRT::Algorithm::isMC() const {
  return eventInfo()->eventType(xAOD::EventInfo::IS_SIMULATION);
}

inline bool xTRT::Algorithm::isData() const {
  return (not eventInfo()->eventType(xAOD::EventInfo::IS_SIMULATION));
}

inline xAOD::TEvent* xTRT::Algorithm::event() {
  return m_event;
}

inline xAOD::TStore* xTRT::Algorithm::store() {
  return m_store;
}

inline const xAOD::EventInfo* xTRT::Algorithm::eventInfo() const {
  const xAOD::EventInfo* evtinfo = nullptr;
  if ( evtStore()->retrieve(evtinfo,"EventInfo").isFailure() ) {
    ANA_MSG_ERROR("Cannot retrieve EventInfo for some reason");
  }
  return evtinfo;
}

template <class T>
inline bool xTRT::Algorithm::debug_nullptr(const T* ptr, const std::string& message) const {
  if ( ptr == nullptr ) {
    ANA_MSG_DEBUG("Null pointer: " << message);
    return false;
  }
  return true;
}

template <class T>
inline bool xTRT::Algorithm::warn_nullptr(const T* ptr, const std::string& message) const {
  if ( ptr == nullptr ) {
    ANA_MSG_WARNING("Null pointer: " << message);
    return false;
  }
  return true;
}

template <class C, class T> inline const C*
xTRT::Algorithm::selectedContainer(const C* raw,
                                   std::function<bool(const T*,const xTRT::Config*)> selector,
                                   const std::string& contName) {
  auto goodObjects    = std::make_unique<C>();
  auto goodObjectsAux = std::make_unique<xAOD::AuxContainerBase>();
  goodObjects->setStore(goodObjectsAux.get());
  for ( auto obj : *raw ) {
    if ( selector(obj,config()) ) {
      auto goodObj = new T();
      goodObjects->push_back(goodObj);
      *goodObj = *obj;
    }
  }
  if ( evtStore()->record(goodObjects.release(),contName).isFailure() ) {
    ANA_MSG_ERROR("Couldn't record " << contName << ", returning nullptr.");
    return nullptr;
  }
  if ( evtStore()->record(goodObjectsAux.release(),contName+"Aux.").isFailure() ) {
    ANA_MSG_ERROR("Couldn't record " << contName << "Aux., returning nullptr.");
    return nullptr;
  }
  const C* retObjs = nullptr;
  if ( evtStore()->retrieve(retObjs,contName).isFailure() ) {
    ANA_MSG_ERROR("Couldn't retrieve " << contName << ", returning nullptr");
    return nullptr;
  }
  return retObjs;
}

inline int xTRT::Algorithm::nTRT(const xAOD::TrackParticle* track) {
  uint8_t nTRThits = -1;
  uint8_t nTRTouts = -1;
  if ( !track->summaryValue(nTRThits,xAOD::numberOfTRTHits) ) {
    XTRT_FATAL("No TRT hits");
  }
  if ( !track->summaryValue(nTRTouts,xAOD::numberOfTRTOutliers) ) {
    XTRT_FATAL("No TRT outliers");
  }
  return ((int)nTRThits + (int)nTRTouts);
}

inline int xTRT::Algorithm::nTRT_PrecTube(const xAOD::TrackParticle* track) {
  uint8_t nTRThits = -1;
  if ( !track->summaryValue(nTRThits,xAOD::numberOfTRTHits) ) {
    XTRT_FATAL("No TRT hits");
  }
  return ((int)nTRThits);
}

inline int xTRT::Algorithm::nTRT_Outlier(const xAOD::TrackParticle* track) {
  uint8_t nTRTouts = -1;
  if ( !track->summaryValue(nTRTouts,xAOD::numberOfTRTOutliers) ) {
    XTRT_FATAL("No TRT outliers");
  }
  return ((int)nTRTouts);
}

inline int xTRT::Algorithm::nPixel(const xAOD::TrackParticle* track) {
  uint8_t nPix = -1;
  if ( !track->summaryValue(nPix,xAOD::numberOfPixelHits) ) {
    XTRT_FATAL("No Pix hits?");
  }
  return ((int)nPix);
}

inline int xTRT::Algorithm::nSilicon(const xAOD::TrackParticle* track) {
  uint8_t nSCT = -1;
  if ( !track->summaryValue(nSCT,xAOD::numberOfSCTHits) ) {
    XTRT_FATAL("No SCT hits?");
  }
  return (nPixel(track) + (int)nSCT);
}

inline int xTRT::Algorithm::nSiliconHoles(const xAOD::TrackParticle* track) {
  uint8_t nPixHole = -1;
  uint8_t nSCTHole = -1;
  if ( !track->summaryValue(nPixHole,xAOD::numberOfPixelHoles) ) {
    XTRT_FATAL("No Pix holes?");
  }
  if ( !track->summaryValue(nSCTHole,xAOD::numberOfSCTHoles) ) {
    XTRT_FATAL("No SCT holes?");
  }
  return ((int)nPixHole + (int)nSCTHole);
}

inline int xTRT::Algorithm::nSiliconShared(const xAOD::TrackParticle* track) {
  uint8_t nSCTSh = -1;
  uint8_t nPixSh = -1;
  if ( !track->summaryValue(nPixSh,xAOD::numberOfPixelSharedHits) ) {
    XTRT_FATAL("No Pix shared?");
  }
  if ( !track->summaryValue(nSCTSh,xAOD::numberOfSCTSharedHits) ) {
    XTRT_FATAL("No SCT shared?");
  }
  return ((int)nSCTSh + (int)nPixSh);
}

inline float xTRT::Algorithm::caloIso(const xAOD::Electron* electron) {
  float topoetcone20 = 99999;
  if ( not electron->isolationValue(topoetcone20,xAOD::Iso::topoetcone20) ) {
    XTRT_FATAL("No topoetcone20 in electron");
  }
  return topoetcone20;
}

inline float xTRT::Algorithm::caloIso(const xAOD::Muon* muon) {
  float topoetcone20;
  if ( not muon->isolation(topoetcone20,xAOD::Iso::topoetcone20) ) {
    XTRT_FATAL("No topoetcone20 in muon");
  }
  return topoetcone20;
}

inline float xTRT::Algorithm::trackIso(const xAOD::Electron* electron) {
  float ptvarcone20 = 99999;
  if ( not electron->isolationValue(ptvarcone20,xAOD::Iso::ptvarcone20) ) {
    XTRT_FATAL("No ptvarcone20 in electron");
  }
  return ptvarcone20;
}

inline float xTRT::Algorithm::trackIso(const xAOD::Muon* muon) {
  float ptvarcone30 = 99999;
  if ( not muon->isolation(ptvarcone30,xAOD::Iso::ptvarcone30) ) {
    XTRT_FATAL("No ptvarcone30 in muon");
  }
  return ptvarcone30;
}

inline float xTRT::Algorithm::trackIso_pTcone20(const xAOD::Electron* electron) {
  float ptcone20 = 99999;
  if ( not electron->isolationValue(ptcone20,xAOD::Iso::ptcone20) ) {
    XTRT_FATAL("No ptcone20 in electron");
  }
  return ptcone20;
}

inline bool xTRT::Algorithm::truthMatched(const xAOD::Electron* electron) {
  static const SG::AuxElement::ConstAccessor<int> truthType      {"truthType"};
  static const SG::AuxElement::ConstAccessor<int> truthOrigin    {"truthOrigin"};
  static const SG::AuxElement::ConstAccessor<int> bkgTruthOrigin {"bkgTruthOrigin"};

  int true_type = 0, true_origin = 0, true_originbkg = 0;
  if ( truthType.isAvailable(*electron)      ) true_type      = truthType(*electron);
  if ( truthOrigin.isAvailable(*electron)    ) true_origin    = truthOrigin(*electron);
  if ( bkgTruthOrigin.isAvailable(*electron) ) true_originbkg = bkgTruthOrigin(*electron);

  bool istruthmatched = ( true_type == MCTruthPartClassifier::ParticleType::IsoElectron ||
                          ( true_type == MCTruthPartClassifier::ParticleType::BkgElectron &&
                            true_origin == MCTruthPartClassifier::ParticleOrigin::PhotonConv &&
                            ( true_originbkg == MCTruthPartClassifier::ParticleOrigin::TauLep ||
                              true_originbkg == MCTruthPartClassifier::ParticleOrigin::ZBoson ||
                              true_originbkg == MCTruthPartClassifier::ParticleOrigin::WBoson ) ) );
  return istruthmatched;
}

inline bool xTRT::Algorithm::truthMatched(const xAOD::Muon* muon) {
  static const SG::AuxElement::ConstAccessor<int> truthType {"truthType"};
  if ( not truthType.isAvailable(*muon) ) {
    return false;
  }
  else {
    int true_type = truthType(*muon);
    return (true_type == MCTruthPartClassifier::ParticleType::IsoMuon);
  }
}

inline float xTRT::Algorithm::trackOccupancy(const xAOD::TrackParticle* track) {
  static SG::AuxElement::ConstAccessor<float> trkOccAcc("TRTTrackOccupancy");
  if ( trkOccAcc.isAvailable(*track) ) {
    return trkOccAcc(*track);
  }
  else {
    XTRT_FATAL("TRTTrackOccupancy not available!");
  }
  return -1.0;
}

template <class T1, class T2> inline T1
xTRT::Algorithm::get(const SG::AuxElement::ConstAccessor<T1>& acc, const T2* xobj, const std::string adn) {
  if ( acc.isAvailable(*xobj) ) {
    return acc(*xobj);
  }
  else {
    std::string msg = "AuxElement: " + adn + " not available, ret 0";
    XTRT_WARNING(msg);
  }
  return 0;
}

template <class T1, class T2> inline T1
xTRT::Algorithm::retrieve(const T2* xobj, const std::string adn) {
  static const SG::AuxElement::ConstAccessor<T1> acc{adn};
  if ( acc.isAvailable(*xobj) ) {
    return acc(*xobj);
  }
  else {
    std::string msg = "AuxElement: " + adn + "not available, ret 0";
    XTRT_WARNING(msg);
    return 0;
  }
}

inline const asg::AnaToolHandle<InDet::IInDetTrackSelectionTool>&
xTRT::Algorithm::trackSelToolHandle() const {
  return m_trackSelToolHandle;
}

inline const asg::AnaToolHandle<InDet::IInDetTrackSelectionTool>&
xTRT::Algorithm::trackSelElecToolHandle() const {
  return m_trackSelElecToolHandle;
}

inline const asg::AnaToolHandle<InDet::IInDetTrackSelectionTool>&
xTRT::Algorithm::trackSelMuonToolHandle() const {
  return m_trackSelMuonToolHandle;
}

inline const asg::AnaToolHandle<Trig::IMatchingTool>&
xTRT::Algorithm::trigMatchingToolHandle() const {
  return m_trigMatchingToolHandle;
}

inline const asg::AnaToolHandle<Trig::IMatchingTool>&
xTRT::Algorithm::trigMatchingToolHandle() {
  return m_trigMatchingToolHandle;
}
